#! /bin/sh

# update-rc.d aprsc defaults 84

### BEGIN INIT INFO
# Provides:       aprsc
# Required-Start: $syslog $network $local_fs
# Required-Stop:  $syslog $local_fs
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: start and stop aprsc
# Description: Provide an APRS-IS server for the amateur radio APRS network
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BASEDIR=/opt/aprsc
DAEMON=$BASEDIR/sbin/aprsc
NAME=aprsc
DIRNAME=aprsc
PIDNAME=aprsc
DESC="APRS-IS server"

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

# Include aprsc defaults if available
if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME
fi

if [ "$STARTAPRSC" != "yes" ];then
	echo "Starting of $NAME not enabled in /etc/default/$NAME."
	exit 0
fi

# copy files required for chrooted operation
prepare_chroot () {
	log_daemon_msg "Preparing chroot for $DESC:" "aprsc chroot"
	# config files
	/bin/cp -p /etc/resolv.conf /etc/nsswitch.conf /etc/hosts /etc/gai.conf $BASEDIR/etc/
	# live upgrade requires libraries to be visible within chroot, so
	# set up a read-only bind mount of /lib
	grep -q "$DIRNAME/lib " /proc/mounts || \
		( mount --bind /lib $BASEDIR/lib \
		&& mount -o remount,ro,bind $BASEDIR/lib )
	if [ -e /lib64 ]; then
		grep -q "$DIRNAME/lib64 " /proc/mounts || \
			( mount --bind /lib64 $BASEDIR/lib64 \
			&& mount -o remount,ro,bind $BASEDIR/lib64 )
	fi
	grep -q "$DIRNAME/usr/lib " /proc/mounts || \
		( mount --bind /usr/lib $BASEDIR/usr/lib \
		&& mount -o remount,ro,bind $BASEDIR/usr/lib )
	if [ -e /usr/lib64 ]; then
		grep -q "$DIRNAME/usr/lib64 " /proc/mounts || \
			( mount --bind /usr/lib64 $BASEDIR/usr/lib64 \
			&& mount -o remount,ro,bind $BASEDIR/usr/lib64 )
	fi
	log_end_msg 0
}

check_configuration() {
  	log_daemon_msg "Testing aprsc configuration:" "aprsc"
	if ! $DAEMON $DAEMON_OPTS -y > /dev/null 2>&1; then
		$DAEMON $DAEMON_OPTS -y || true
		log_end_msg 1
		exit 1
	fi
}

case "$1" in
  start)
	set -e
	prepare_chroot
  	check_configuration
  	ulimit -c unlimited
  	log_daemon_msg "Starting $DESC:" "aprsc"
	if start-stop-daemon --start --quiet --oknodo --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON -- $DAEMON_OPTS; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  stop)
  	log_daemon_msg "Stopping $DESC:" "aprsc"
	#set -e  # don't upset if it fails..
	if start-stop-daemon --stop --quiet --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON --oknodo --retry 15; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  graceful | reload )
  	check_configuration
  	log_daemon_msg "Reloading $DESC configuration files:" "aprsc"
	if start-stop-daemon --stop --signal USR1 --quiet --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  liveupgrade )
	prepare_chroot
  	check_configuration
  	log_daemon_msg "Performing $DESC live upgrade:" "aprsc"
	if start-stop-daemon --stop --signal USR2 --quiet --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	echo "Black magic invoked - live upgrade triggered."
	echo "Remember to check /opt/aprsc/logs/aprsc.log for any errors!"
	;;
  force-reload)
	#
	#	If the "reload" option is implemented, move the "force-reload"
	#	option to the "reload" entry above. If not, "force-reload" is
	#	just the same as "restart" except that it does nothing if the
	#   daemon isn't already running.
	# check wether $DAEMON is running. If so, restart
	set -e
	start-stop-daemon --stop --test --quiet --pidfile \
		$BASEDIR/logs/$PIDNAME.pid --retry 15 --exec $DAEMON \
	&& $0 restart \
	|| exit 0
	;;
  restart)
  	check_configuration
  	log_daemon_msg "Stopping $DESC:" "aprsc"
	#set -e  # don't upset if it fails..
	if start-stop-daemon --stop --quiet --oknodo --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON --retry 15; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	
	prepare_chroot
  	log_daemon_msg "Starting $DESC:" "aprsc"
	set -e
	if start-stop-daemon --start --quiet --oknodo --pidfile $BASEDIR/logs/$PIDNAME.pid --exec $DAEMON -- $DAEMON_OPTS; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|reload|liveupgrade|force-reload}" >&2
	exit 1
	;;
esac

exit 0
